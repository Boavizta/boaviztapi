name: build_client_sdk

on:
  push:
    branch:
      - 'feat/build_client_sdk_rust'
    #tags:
    #  - '*'
    paths-ignore:
      - 'docs/**'
      - 'test/**'
      - 'README.md'
      - 'CHANGELOG.md'
      - 'LICENSE'
      - 'Dockerfile'
      - 'CITATION'
      - 'book.toml'
      - 'CONTRIBUTING.md'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: build_rust_client_sdk
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Install requirements
        run: |
          sudo apt update -y
          sudo apt install docker.io containerd runc wget python3 python3-pip -y
          pip3 install pipenv twine
      - name: Run the API locally
        run: |
          python3 setup.py sdist
          API_VERSION=$(cat boaviztapi/__init__.py | cut -d "'" -f 2)
          echo "API_VERSION=${API_VERSION}" >> $GITHUB_ENV
          docker build --build-arg VERSION=${API_VERSION} . --file Dockerfile --tag boaviztapi:latest
          docker run -p "5000:5000" --name=boaviztapi -tid boaviztapi:latest
      - name: Get logs from the API container in case of a failure
        run: |
          docker logs boaviztapi
      - name: Get the openapi.json definition and generate the code
        run: |
          while [[ ! $(docker ps | grep boaviztapi) ]]; do sleep 1; echo "Waiting for BoaviztAPI container to boot"; done
          wget http://127.0.0.1:5000/openapi.json
          docker run --rm -v "${PWD}:/local" openapitools/openapi-generator-cli:v6.0.0 generate -i /local/openapi.json -g rust -o /local/boaviztapi_sdk --package-name boaviztapi_sdk
      - name: Feed credentials for cargo
        run: |
          echo ${CARGO_}
      - name: Build the crate and push it
        run: |
          sudo chown -R $(whoami) boaviztapi_sdk 
          #SDK_VERSION=${{ env.API_VERSION }}
          #echo "SDK_VERSION == ${SDK_VERSION}"
          cd boaviztapi_sdk
          #sed -i "s/^version.*/version = \"${SDK_VERSION}\"/" Cargo.toml
          sed -i "s/^authors.*/authors = [\"Boavizta contributors contact@boavizta.org\"]/" Cargo.toml
          # Configure `reqwest` to use rustls-tls instead of native dependency on OpenSSL
          sed -i "/^\[dependencies.reqwest\].*/a default-features = false" Cargo.toml
          sed -i "s/^features.*/features = [\"json\", \"multipart\", \"rustls-tls\"]/" Cargo.toml
          # Rename variables
          echo "⚠ Rename the field \`TYPE`` into \`usage_type\` to comply with Rust naming conventions"
          echo "⚠ This is really a hacky workaround that we should remove when the code generation is fixed" 
          sed -i "s/pub TYPE: Option<String>,/pub usage_type: Option<String>,/" src/models/usage_cloud.rs
          sed -i "s/TYPE: None,/usage_type: None,/" src/models/usage_cloud.rs
          sed -i "s/pub TYPE: Option<String>,/pub usage_type: Option<String>,/" src/models/usage_server.rs
          sed -i "s/TYPE: None,/usage_type: None,/" src/models/usage_server.rs
          #- uses: actions-rs/cargo@v1
          #  with:
          #    command: clippy
          cargo build
          cargo clippy
      - uses: katyo/publish-crates@v1
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          dry-run: true
          path: './boaviztapi_sdk'
          
